<?php
/**
 * Visual Field Editor - Interactive drag-and-drop positioning like PDFFiller
 */

declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/lib/fl100_test_data_generator.php';

// Get template ID from URL parameter, default to fl100_gc120
$templateParam = $_GET['template'] ?? 'fl100_gc120';
$templateId = 't_' . preg_replace('/[^a-z0-9_-]/', '_', strtolower($templateParam));
$positionsFile = __DIR__ . '/../data/' . $templateId . '_positions.json';

// Load or auto-generate positions
$positions = [];
$autoGenerated = false;

if (file_exists($positionsFile)) {
    $positionData = json_decode(file_get_contents($positionsFile), true);
    // Handle both formats: direct positions object or nested {fields: [...]}
    if (isset($positionData['fields']) && is_array($positionData['fields'])) {
        // Convert array of fields to keyed object
        foreach ($positionData['fields'] as $field) {
            if (isset($field['name'])) {
                $positions[$field['name']] = $field;
            }
        }
    } else {
        $positions = $positionData ?? [];
    }
} else {
    // Position file doesn't exist - try to auto-generate from PDF
    $pdfFile = __DIR__ . '/../uploads/' . str_replace('t_', '', $templateId) . '.pdf';
    
    // Try common PDF filenames
    $possiblePdfs = [
        __DIR__ . '/../uploads/' . str_replace('t_', '', $templateId) . '.pdf',
        __DIR__ . '/../uploads/' . $templateParam . '.pdf',
        __DIR__ . '/../uploads/fl100.pdf', // Fallback
    ];
    
    $foundPdf = null;
    foreach ($possiblePdfs as $pdf) {
        if (file_exists($pdf)) {
            $foundPdf = $pdf;
            break;
        }
    }
    
    if ($foundPdf) {
        require_once __DIR__ . '/lib/pdf_field_extractor.php';
        $extractor = new \WebPdfTimeSaver\Mvp\PdfFieldExtractor();
        
        try {
            $result = $extractor->extractAndGenerateBackgrounds(
                $foundPdf,
                str_replace('t_', '', $templateId),
                __DIR__ . '/../uploads'
            );
            
            if (!empty($result['fields'])) {
                // Convert to keyed format
                foreach ($result['fields'] as $field) {
                    if (isset($field['name'])) {
                        $positions[$field['name']] = $field;
                    }
                }
                
                // Save the auto-generated positions
                file_put_contents($positionsFile, json_encode($positions, JSON_PRETTY_PRINT));
                $autoGenerated = true;
            }
        } catch (Exception $e) {
            error_log("Auto-generation failed: " . $e->getMessage());
        }
    }
}

// Load test data based on template
if (str_contains($templateParam, 'w9')) {
    require_once __DIR__ . '/lib/w9_test_data_generator.php';
    $testData = \WebPdfTimeSaver\Mvp\W9TestDataGenerator::generateCompleteTestData();
} else {
    $testData = \WebPdfTimeSaver\Mvp\FL100TestDataGenerator::generateCompleteTestData();
}

// Handle save action
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'save') {
    $newPositions = json_decode($_POST['positions'] ?? '{}', true);
    if ($newPositions) {
        file_put_contents($positionsFile, json_encode($newPositions, JSON_PRETTY_PRINT));
        echo json_encode(['success' => true]);
        exit;
    }
}

?>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visual Field Editor - PDFTimeSaver</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; background: #f0f2f5; overflow: hidden; }
        
        .app-container { display: flex; height: 100vh; }
        
        /* Top Toolbar */
        .toolbar { position: fixed; top: 0; left: 0; right: 0; height: 60px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; display: flex; align-items: center; padding: 0 20px; z-index: 1000; box-shadow: 0 2px 8px rgba(0,0,0,0.15); }
        .toolbar-title { font-size: 20px; font-weight: 600; flex: 1; }
        .toolbar-actions { display: flex; gap: 10px; }
        .btn { padding: 10px 20px; background: white; color: #667eea; border: none; border-radius: 6px; cursor: pointer; font-weight: 600; transition: all 0.2s; }
        .btn:hover { transform: translateY(-1px); box-shadow: 0 4px 12px rgba(255,255,255,0.3); }
        .btn-success { background: #28a745; color: white; }
        .btn-success:hover { background: #218838; }
        
        /* Left Sidebar - Fields List */
        .sidebar { 
            width: 320px; 
            background: white; 
            border-right: 1px solid #e1e4e8; 
            margin-top: 60px; 
            overflow-y: auto; 
            height: calc(100vh - 60px); 
            transition: all 0.3s ease;
            position: relative;
        }
        .sidebar.collapsed { 
            width: 0; 
            overflow: hidden; 
            border-right: none;
        }
        .sidebar-header { padding: 20px; background: #f6f8fa; border-bottom: 1px solid #e1e4e8; }
        .sidebar-header h3 { margin-bottom: 10px; }
        .search-box { width: 100%; padding: 10px; border: 2px solid #e1e4e8; border-radius: 6px; font-size: 14px; }
        .field-list { padding: 15px; }
        .field-item { padding: 12px; background: #f6f8fa; margin-bottom: 8px; border-radius: 6px; cursor: pointer; transition: all 0.2s; border-left: 4px solid #667eea; }
        .field-item:hover { background: #e1e4e8; transform: translateX(3px); }
        .field-item.active { background: #e7f3ff; border-left-color: #28a745; }
        .field-name { font-weight: 600; font-size: 13px; color: #24292e; margin-bottom: 4px; }
        .field-value { font-size: 11px; color: #666; font-style: italic; }
        
        /* Sidebar Toggle Button */
        .sidebar-toggle {
            position: fixed;
            left: 320px;
            top: 70px;
            width: 30px;
            height: 60px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 0 8px 8px 0;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            z-index: 998;
            transition: left 0.3s ease;
            box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
        }
        .sidebar-toggle:hover { background: #764ba2; }
        .sidebar-toggle.collapsed { left: 0; }
        
        /* Main Canvas Area */
        .canvas-area { 
            flex: 1; 
            margin-top: 60px; 
            overflow: auto; 
            background: #e1e4e8; 
            position: relative;
            transition: margin-left 0.3s ease;
        }
        .canvas-wrapper { padding: 40px; display: flex; justify-content: center; }
        .pdf-canvas { position: relative; background: white; box-shadow: 0 4px 20px rgba(0,0,0,0.15); width: 1700px; height: 2200px; }
        .pdf-background { width: 100%; height: auto; display: block; }
        
        /* Draggable Field Overlays */
        .field-overlay { position: absolute; background: rgba(102, 126, 234, 0.2); border: 2px solid #667eea; border-radius: 4px; cursor: move; padding: 4px 8px; font-size: 12px; color: #24292e; user-select: none; transition: all 0.1s; min-width: 100px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .field-overlay:hover { background: rgba(102, 126, 234, 0.3); border-color: #5568d3; box-shadow: 0 2px 8px rgba(102, 126, 234, 0.4); }
        .field-overlay.active { background: rgba(40, 167, 69, 0.2); border-color: #28a745; border-width: 3px; }
        .field-overlay .field-label { position: absolute; top: -22px; left: 0; background: #667eea; color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px; font-weight: 600; white-space: nowrap; }
        .field-overlay.active .field-label { background: #28a745; }
        
        /* Right Properties Panel */
        .properties-panel { width: 300px; background: white; border-left: 1px solid #e1e4e8; margin-top: 60px; overflow-y: auto; height: calc(100vh - 60px); padding: 20px; }
        .properties-panel h3 { margin-bottom: 15px; color: #24292e; }
        .prop-group { margin-bottom: 20px; }
        .prop-label { font-size: 12px; font-weight: 600; color: #666; margin-bottom: 6px; text-transform: uppercase; letter-spacing: 0.5px; }
        .prop-input { width: 100%; padding: 8px; border: 2px solid #e1e4e8; border-radius: 6px; font-size: 14px; }
        .prop-input:focus { outline: none; border-color: #667eea; }
        .prop-value { font-size: 16px; font-weight: 600; color: #24292e; padding: 10px; background: #f6f8fa; border-radius: 6px; }
        
        .zoom-controls { position: fixed; bottom: 20px; right: 20px; background: white; padding: 10px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: flex; gap: 10px; z-index: 100; }
        .zoom-btn { width: 36px; height: 36px; border: none; background: #667eea; color: white; border-radius: 6px; cursor: pointer; font-size: 18px; }
        .zoom-btn:hover { background: #5568d3; }
        
        .save-indicator { position: fixed; top: 70px; right: 20px; padding: 12px 20px; background: #28a745; color: white; border-radius: 6px; font-weight: 600; opacity: 0; transition: opacity 0.3s; z-index: 1001; }
        .save-indicator.show { opacity: 1; }
        
        .helper-text { font-size: 12px; color: #666; margin-top: 10px; padding: 10px; background: #f6f8fa; border-radius: 6px; }
    </style>
</head>
<body>
    <div class="app-container">
        <?php if ($autoGenerated): ?>
        <!-- Auto-generation notification -->
        <div id="auto-gen-notification" style="position: fixed; top: 70px; left: 50%; transform: translateX(-50%); background: #28a745; color: white; padding: 15px 30px; border-radius: 8px; z-index: 999; box-shadow: 0 4px 12px rgba(0,0,0,0.2);">
            ✅ Auto-generated <?= count($positions) ?> field positions from PDF
        </div>
        <script>
            setTimeout(() => {
                document.getElementById('auto-gen-notification')?.remove();
            }, 5000);
        </script>
        <?php endif; ?>
        
        <!-- Top Toolbar -->
        <div class="toolbar">
            <div class="toolbar-title">📝 Visual Field Editor - <?= htmlspecialchars($templateParam) ?></div>
            <div class="toolbar-actions">
                <button class="btn" onclick="resetAll()">🔄 Reset All</button>
                <button class="btn btn-success" onclick="savePositions()">💾 Save Positions</button>
                <a href="adjust-positions.php?action=generate" class="btn">👁️ Preview PDF</a>
            </div>
        </div>
        
        <div class="save-indicator" id="save-indicator">✅ Positions Saved!</div>
        
        <!-- Left Sidebar -->
        <!-- Sidebar Toggle Button -->
        <button class="sidebar-toggle" id="sidebarToggle" onclick="toggleSidebar()">
            ◀
        </button>
        
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h3>Form Fields (<?php echo count($testData); ?>)</h3>
                <input type="text" class="search-box" id="search-fields" placeholder="🔍 Search fields..." onkeyup="filterFields()">
            </div>
            <div class="field-list" id="field-list">
                <?php foreach ($testData as $key => $value): ?>
                    <div class="field-item" data-key="<?php echo htmlspecialchars($key); ?>" onclick="selectField('<?php echo htmlspecialchars($key); ?>')">
                        <div class="field-name"><?php echo htmlspecialchars($key); ?></div>
                        <div class="field-value"><?php echo htmlspecialchars(substr((string)$value, 0, 40)); ?><?php if (strlen((string)$value) > 40) echo '...'; ?></div>
                    </div>
                <?php endforeach; ?>
            </div>
        </div>
        
        <!-- Main Canvas Area -->
        <div class="canvas-area">
            <div class="canvas-wrapper">
                <div class="pdf-canvas" id="pdf-canvas">
                    <?php
                    // Determine background image based on template
                    $bgImagePath = '../uploads/' . str_replace('t_', '', $templateId) . '_page1_background.png';
                    
                    // Fallback to checking for common patterns
                    if (!file_exists(__DIR__ . '/' . $bgImagePath)) {
                        $bgImagePath = '../uploads/' . $templateParam . '_page1_background.png';
                    }
                    if (!file_exists(__DIR__ . '/' . $bgImagePath)) {
                        $bgImagePath = '../uploads/fl100_page1_background.png'; // Final fallback
                    }
                    ?>
                    <img src="<?= htmlspecialchars($bgImagePath) ?>" alt="<?= htmlspecialchars($templateParam) ?> Page 1" class="pdf-background" id="pdf-bg">
                    <!-- Field overlays will be dynamically added here -->
                </div>
            </div>
        </div>
        
        <!-- Right Properties Panel -->
        <div class="properties-panel">
            <h3>⚙️ Field Properties</h3>
            <div id="no-selection" style="text-align: center; color: #999; padding: 40px 20px;">
                <p style="font-size: 48px; margin-bottom: 10px;">👈</p>
                <p>Click a field to edit its properties</p>
            </div>
            <div id="properties-form" style="display: none;">
                <div class="prop-group">
                    <div class="prop-label">Field Name</div>
                    <div class="prop-value" id="prop-name">-</div>
                </div>
                <div class="prop-group">
                    <div class="prop-label">Value</div>
                    <div class="prop-value" id="prop-value">-</div>
                </div>
                <div class="prop-group">
                    <div class="prop-label">X Position (mm)</div>
                    <input type="number" class="prop-input" id="prop-x" step="0.1" onchange="updatePosition()">
                </div>
                <div class="prop-group">
                    <div class="prop-label">Y Position (mm)</div>
                    <input type="number" class="prop-input" id="prop-y" step="0.1" onchange="updatePosition()">
                </div>
                <div class="prop-group">
                    <div class="prop-label">Width (mm)</div>
                    <input type="number" class="prop-input" id="prop-width" step="0.1" onchange="updatePosition()">
                </div>
                <div class="prop-group">
                    <div class="prop-label">Font Size</div>
                    <input type="number" class="prop-input" id="prop-font-size" min="6" max="18" onchange="updatePosition()">
                </div>
                <div class="helper-text">
                    💡 <strong>Tip:</strong> Drag the field on the canvas to reposition, or use the inputs above for precise placement.
                </div>
            </div>
        </div>
        
        <!-- Zoom Controls -->
        <div class="zoom-controls">
            <button class="zoom-btn" onclick="zoomOut()">−</button>
            <span id="zoom-level">100%</span>
            <button class="zoom-btn" onclick="zoomIn()">+</button>
        </div>
        
        <!-- Page Navigation -->
        <div class="page-nav" style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background: white; padding: 10px 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 999;">
            <button class="zoom-btn" onclick="prevPage()">◀ Prev</button>
            <span id="page-info" style="margin: 0 15px; font-weight: 600;">Page 1</span>
            <button class="zoom-btn" onclick="nextPage()">Next ▶</button>
        </div>
    </div>
    
    <script>
        let positions = <?php echo json_encode($positions); ?>;
        let testData = <?php echo json_encode($testData); ?>;
        let currentField = null;
        let isDragging = false;
        let dragOffset = { x: 0, y: 0 };
        let zoom = 0.5; // Start at 50% zoom since image is large
        const MM_TO_PX = 7.87; // Conversion factor: 1700px / 215.9mm = 7.87 px/mm
        let currentPage = 1;
        const templateId = '<?= $templateParam ?>';
        
        // Debug: Log loaded positions
        console.log('Loaded positions:', positions);
        console.log('Total position keys:', Object.keys(positions).length);
        console.log('Total testData keys:', Object.keys(testData).length);
        console.log('First position key:', Object.keys(positions)[0]);
        console.log('First position data:', positions[Object.keys(positions)[0]]);
        console.log('First testData key:', Object.keys(testData)[0]);
        
        // Initialize field overlays on the canvas
        function initializeFields() {
            const canvas = document.getElementById('pdf-canvas');
            
            for (let key in testData) {
                if (positions[key]) {
                    const pos = positions[key];
                    const overlay = createFieldOverlay(key, testData[key], pos);
                    canvas.appendChild(overlay);
                }
            }
        }
        
        function createFieldOverlay(key, value, pos) {
            const overlay = document.createElement('div');
            overlay.className = 'field-overlay';
            overlay.id = 'overlay-' + key;
            overlay.setAttribute('data-key', key);
            
            // Convert mm to pixels for display
            overlay.style.left = (pos.x * MM_TO_PX) + 'px';
            overlay.style.top = (pos.y * MM_TO_PX) + 'px';
            overlay.style.width = (pos.width * MM_TO_PX) + 'px';
            overlay.textContent = String(value).substring(0, 30);
            
            // Add label
            const label = document.createElement('div');
            label.className = 'field-label';
            label.textContent = key;
            overlay.appendChild(label);
            
            // Add drag handlers
            overlay.addEventListener('mousedown', startDrag);
            overlay.addEventListener('click', (e) => {
                e.stopPropagation();
                selectField(key);
            });
            
            return overlay;
        }
        
        function selectField(key) {
            currentField = key;
            
            console.log('Selecting field:', key);
            console.log('Position data for this field:', positions[key]);
            
            // Update sidebar
            document.querySelectorAll('.field-item').forEach(el => el.classList.remove('active'));
            document.querySelector(`[data-key="${key}"]`)?.classList.add('active');
            
            // Update canvas overlays
            document.querySelectorAll('.field-overlay').forEach(el => el.classList.remove('active'));
            document.getElementById('overlay-' + key)?.classList.add('active');
            
            // Update properties panel
            const pos = positions[key];
            if (pos) {
                console.log('Setting property panel X to:', pos.x);
                document.getElementById('no-selection').style.display = 'none';
                document.getElementById('properties-form').style.display = 'block';
                document.getElementById('prop-name').textContent = key;
                document.getElementById('prop-value').textContent = String(testData[key]).substring(0, 100);
                document.getElementById('prop-x').value = pos.x;
                document.getElementById('prop-y').value = pos.y;
                document.getElementById('prop-width').value = pos.width;
                document.getElementById('prop-font-size').value = pos.fontSize || 9;
            } else {
                console.error('No position data found for field:', key);
            }
        }
        
        function startDrag(e) {
            if (e.button !== 0) return; // Only left click
            
            const overlay = e.target.closest('.field-overlay');
            if (!overlay) return;
            
            isDragging = true;
            currentField = overlay.getAttribute('data-key');
            selectField(currentField);
            
            const rect = overlay.getBoundingClientRect();
            const canvasRect = document.getElementById('pdf-canvas').getBoundingClientRect();
            
            // Calculate offset from top-left of the overlay element
            dragOffset.x = e.clientX - rect.left;
            dragOffset.y = e.clientY - rect.top;
            
            console.log('=== START DRAG ===');
            console.log('Field:', currentField);
            console.log('Mouse position:', { clientX: e.clientX, clientY: e.clientY });
            console.log('Overlay rect:', { left: rect.left, top: rect.top, width: rect.width, height: rect.height });
            console.log('Canvas rect:', { left: canvasRect.left, top: canvasRect.top });
            console.log('Calculated dragOffset:', { x: dragOffset.x, y: dragOffset.y });
            console.log('Current position in mm:', { x: positions[currentField].x, y: positions[currentField].y });
            console.log('Current position in px:', { 
                x: positions[currentField].x * MM_TO_PX, 
                y: positions[currentField].y * MM_TO_PX 
            });
            
            // Reset debug flag for new drag
            window.dragLoggedOnce = false;
            
            document.addEventListener('mousemove', doDrag);
            document.addEventListener('mouseup', stopDrag);
            
            e.preventDefault();
        }
        
        function doDrag(e) {
            if (!isDragging || !currentField) return;
            
            const canvas = document.getElementById('pdf-canvas');
            const canvasRect = canvas.getBoundingClientRect();
            const overlay = document.getElementById('overlay-' + currentField);
            
            if (!overlay) return;
            
            // Calculate new position relative to canvas
            let newX = e.clientX - canvasRect.left - dragOffset.x;
            let newY = e.clientY - canvasRect.top - dragOffset.y;
            
            // Debug logging (first drag only)
            if (!window.dragLoggedOnce) {
                console.log('=== DURING DRAG ===');
                console.log('Mouse position:', { clientX: e.clientX, clientY: e.clientY });
                console.log('Canvas rect:', { left: canvasRect.left, top: canvasRect.top });
                console.log('dragOffset:', { x: dragOffset.x, y: dragOffset.y });
                console.log('CALCULATION: newX = ' + e.clientX + ' - ' + canvasRect.left + ' - ' + dragOffset.x);
                console.log('calculatedNewX BEFORE constraint:', newX);
                console.log('calculatedNewY BEFORE constraint:', newY);
                window.dragLoggedOnce = true;
            }
            
            // Constrain to canvas bounds
            newX = Math.max(0, Math.min(newX, canvasRect.width - overlay.offsetWidth));
            newY = Math.max(0, Math.min(newY, canvasRect.height - overlay.offsetHeight));
            
            if (!window.dragLoggedOnce2) {
                console.log('calculatedNewX AFTER constraint:', newX);
                console.log('calculatedNewY AFTER constraint:', newY);
                console.log('Canvas dimensions:', { width: canvasRect.width, height: canvasRect.height });
                console.log('Overlay dimensions:', { width: overlay.offsetWidth, height: overlay.offsetHeight });
                window.dragLoggedOnce2 = true;
            }
            
            // Update overlay position
            overlay.style.left = newX + 'px';
            overlay.style.top = newY + 'px';
            
            // Convert px back to mm and update positions object
            const mmX = newX / MM_TO_PX;
            const mmY = newY / MM_TO_PX;
            
            if (!window.dragLoggedOnce3) {
                console.log('Converting to mm: ' + newX + ' / ' + MM_TO_PX + ' = ' + mmX);
                window.dragLoggedOnce3 = true;
            }
            
            // Ensure valid numbers
            if (!isNaN(mmX) && isFinite(mmX)) {
                const newXmm = parseFloat(mmX.toFixed(2));
                console.log(`Setting ${currentField} X: ${positions[currentField].x} → ${newXmm}`);
                positions[currentField].x = newXmm;
            } else {
                console.error('Invalid X calculation:', { newX, MM_TO_PX, mmX });
            }
            
            if (!isNaN(mmY) && isFinite(mmY)) {
                const newYmm = parseFloat(mmY.toFixed(2));
                positions[currentField].y = newYmm;
            } else {
                console.error('Invalid Y calculation:', { newY, MM_TO_PX, mmY });
            }
            
            // Update properties panel inputs
            const propX = document.getElementById('prop-x');
            const propY = document.getElementById('prop-y');
            if (propX) propX.value = positions[currentField].x;
            if (propY) propY.value = positions[currentField].y;
            
            console.log(`Position updated: ${currentField} = (${positions[currentField].x}, ${positions[currentField].y})`);
        }
        
        function stopDrag() {
            isDragging = false;
            document.removeEventListener('mousemove', doDrag);
            document.removeEventListener('mouseup', stopDrag);
        }
        
        function updatePosition() {
            if (!currentField) return;
            
            positions[currentField].x = parseFloat(document.getElementById('prop-x').value);
            positions[currentField].y = parseFloat(document.getElementById('prop-y').value);
            positions[currentField].width = parseFloat(document.getElementById('prop-width').value);
            positions[currentField].fontSize = parseInt(document.getElementById('prop-font-size').value);
            
            // Update overlay position
            const overlay = document.getElementById('overlay-' + currentField);
            if (overlay) {
                overlay.style.left = (positions[currentField].x * MM_TO_PX) + 'px';
                overlay.style.top = (positions[currentField].y * MM_TO_PX) + 'px';
                overlay.style.width = (positions[currentField].width * MM_TO_PX) + 'px';
            }
        }
        
        async function savePositions() {
            const formData = new FormData();
            formData.append('action', 'save');
            formData.append('positions', JSON.stringify(positions));
            
            try {
                const response = await fetch('visual-field-editor.php', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                if (result.success) {
                    const indicator = document.getElementById('save-indicator');
                    indicator.classList.add('show');
                    setTimeout(() => indicator.classList.remove('show'), 2000);
                }
            } catch (error) {
                alert('Error saving positions: ' + error.message);
            }
        }
        
        function filterFields() {
            const search = document.getElementById('search-fields').value.toLowerCase();
            document.querySelectorAll('.field-item').forEach(item => {
                const text = item.textContent.toLowerCase();
                item.style.display = text.includes(search) ? 'block' : 'none';
            });
        }
        
        function zoomIn() {
            zoom = Math.min(zoom + 0.1, 2.0);
            applyZoom();
        }
        
        function zoomOut() {
            zoom = Math.max(zoom - 0.1, 0.5);
            applyZoom();
        }
        
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const toggle = document.getElementById('sidebarToggle');
            const isCollapsed = sidebar.classList.contains('collapsed');
            
            if (isCollapsed) {
                sidebar.classList.remove('collapsed');
                toggle.classList.remove('collapsed');
                toggle.innerHTML = '◀';
            } else {
                sidebar.classList.add('collapsed');
                toggle.classList.add('collapsed');
                toggle.innerHTML = '▶';
            }
        }
        
        function applyZoom() {
            const canvas = document.getElementById('pdf-canvas');
            canvas.style.transform = `scale(${zoom})`;
            canvas.style.transformOrigin = 'top center';
            document.getElementById('zoom-level').textContent = Math.round(zoom * 100) + '%';
        }
        
        function resetAll() {
            if (confirm('Reset all positions to default? This cannot be undone.')) {
                location.href = 'adjust-positions.php?action=regenerate';
            }
        }
        
        // Initialize on load
        window.addEventListener('load', () => {
            applyZoom(); // Apply initial 50% zoom
            initializeFields();
            
            // Auto-select first field
            const firstKey = Object.keys(testData)[0];
            if (firstKey) {
                setTimeout(() => selectField(firstKey), 100);
            }
        });
        
        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (!currentField) return;
            
            const step = e.shiftKey ? 10 : 1;
            let updated = false;
            
            switch(e.key) {
                case 'ArrowLeft':
                    positions[currentField].x -= step / MM_TO_PX;
                    updated = true;
                    break;
                case 'ArrowRight':
                    positions[currentField].x += step / MM_TO_PX;
                    updated = true;
                    break;
                case 'ArrowUp':
                    positions[currentField].y -= step / MM_TO_PX;
                    updated = true;
                    break;
                case 'ArrowDown':
                    positions[currentField].y += step / MM_TO_PX;
                    updated = true;
                    break;
                case 's':
                    if (e.ctrlKey || e.metaKey) {
                        e.preventDefault();
                        savePositions();
                    }
                    return;
            }
            
            if (updated) {
                e.preventDefault();
                document.getElementById('prop-x').value = positions[currentField].x;
                document.getElementById('prop-y').value = positions[currentField].y;
                updatePosition();
            }
        });
        
        // Page navigation functions
        function prevPage() {
            if (currentPage > 1) {
                currentPage--;
                loadPage(currentPage);
            }
        }
        
        function nextPage() {
            currentPage++;
            loadPage(currentPage);
        }
        
        function loadPage(pageNum) {
            const bgImage = document.getElementById('pdf-bg');
            const newSrc = `../uploads/${templateId}_page${pageNum}_background.png`;
            
            // Check if image exists
            const img = new Image();
            img.onload = function() {
                bgImage.src = newSrc;
                document.getElementById('page-info').textContent = `Page ${pageNum}`;
                
                // Hide/show fields for current page
                document.querySelectorAll('.field-overlay').forEach(overlay => {
                    const key = overlay.getAttribute('data-key');
                    const pos = positions[key];
                    if (pos && pos.page === pageNum) {
                        overlay.style.display = 'block';
                    } else if (pos) {
                        overlay.style.display = 'none';
                    }
                });
            };
            img.onerror = function() {
                console.log('No page', pageNum, '- staying on page', currentPage);
                if (pageNum > currentPage) {
                    currentPage = pageNum - 1; // Revert on next page failure
                }
            };
            img.src = newSrc;
        }
    </script>
</body>
</html>

